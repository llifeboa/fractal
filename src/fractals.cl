#define MANDELBROT 0
#define JULIA 1
#define BURNING_SHIP 2

__constant int colors[] = {5773381,5838917,5904197,6035269,6166340,6231876,6363204,6494020,6559555,6690627,6756163,6886979,7018051,7149379,7214915,7345731,7411266,7542339,7673411,7804482,7869762,7935298,8066369,8197441,8262977,8394049,8524865,8655937,8721472,8787009,8917825,8983616,9114432,9245504,9376320,9441856,9572927,9638207,9769279,9900351,10031167,10096703,10227775,10293310,10424126,10555198,10620733,10751549,10817085,10947901,11078973,11144252,11275069,11406141,11471676,11602491,11667771,11798843,11864123,11994939,12126011,12256827,12322363,12452922,12518202,12649530,12714553,12910905,12976441,13041977,13108025,13174328,13240377,13306681,13372728,13373241,13439289,13505593,13571385,13637433,13703224,13769272,13769784,13901112,13966904,14032696,14033208,14099256,14165048,14230839,14296631,14297144,14363192,14428984,14494776,14560567,14626359,14692151,14758199,14758199,14824247,14890039,14955831,15021623,15087415,15087670,15219255,15285046,15350838,15416630,15482422,15482678,15548726,15614517,15680309,15746101,15746357,15812149,15877941,15943733,16009525,16075572,16075573,16141364,16207156,16272948,16338740,16404788,16404787,16470835,16536627,16602419,16668211,16668467,16734771,16735282,16736049,16736817,16737329,16738096,16738864,16739375,16740143,16740654,16741421,16741933,16742700,16743212,16743979,16744491,16745258,16745769,16746536,16747048,16747815,16748327,16749093,16749349,16750116,16750883,16751393,16751905,16752671,16753182,16753692,16754460,16755226,16755736,16756247,16756757,16757522,16758033,16759054,16759307,16760071,16760582,16761090,16695555,16498185,16235278,16037907,15840535,15577371,15379997,15182624,14984995,14787621,14524710,14327336,14129706,13866795,13669421,13472047,13274416,13077041,12813874,12616499,12419124,12156213,11958838,11695927,11498296,11300921,11037754,10906171,10642747,10445372,10247997,9984829,9787454,9590079,9392703,9129536,8932160,8734784,8537153,8339777,8076866,7879490,7616322,7418691,7155779,6958403,6760772,6563396,6300484,6102852,5905477,5707845,5642053,5642309,5642309,5642309,5642053,5642309,5642309,5642309,5642053,5642309,5642309,5642309,5642053,5642309,5642309,5642309,5642053,5642309,5642309,5642309,5642053,5642309,5642309,5642309,5642053,5642309,5642309,
6821858,6887394,6952930,7018466,7084002,7149538,7215074,7346146,7411682,7477218,7542754,7608034,7739106,7804642,7870178,8001250,8066786,8132322,8263394,8328930,8394466,8525282,8590818,8656354,8787426,8852962,8984034,9049570,9115106,9246178,9311714,9442786,9508322,9639394,9704674,9770210,9901282,9966818,10097890,10163426,10294498,10360034,10491106,10556642,10622178,10753250,10818786,10949858,11015394,11080930,11212258,11277794,11408866,11474402,11539938,11671010,11736802,11802338,11933410,11998946,12064738,12195810,12261346,12327138,12458210,12524002,12589538,12720610,12786402,12851938,12917730,12983522,13049314,13115106,13180898,13246690,13312482,13378274,13444066,13509858,13575650,13641442,13707234,13773026,13838818,13904610,13970402,14036194,14101986,14168034,14233826,14299618,14365410,14365666,14431458,14497250,14563298,14629090,14694882,14760674,14760930,14826978,14892770,14958562,15024354,15024866,15090658,15156450,15222498,15288290,15354082,15354338,15420386,15486178,15486690,15552482,15618274,15618786,15684578,15750370,15750882,15816674,15816930,15882978,15948770,15949282,16015074,16015586,16081378,16081634,16147682,16147938,16213986,16214242,16214753,16280545,16281057,16281569,16281825,16282337,16282849,16283105,16283617,16349665,16349921,16350433,16350689,16285665,16286177,16286433,16286945,16287201,16287457,16287969,16222689,16223201,16223457,16223713,16158433,16158945,16159201,16093921,16094177,16028897,16029153,15963873,15964129,15898849,15833569,15833825,15768545,15703265,15703521,15637985,15572705,15507425,15441889,15376353,15310561,15179233,15047905,14916321,14784993,14653409,14522081,14390497,14259169,14127841,13996257,13864673,13667809,13536225,13404898,13273314,13141730,13010146,12813026,12681698,12550114,12352994,12221410,12089826,11892706,11761122,11629794,11432418,11300834,11169250,10972130,10840546,10708962,10511842,10380258,10248674,10051554,9919970,9788386,9591266,9459682,9328098,9130978,8999394,8867810,8736226,8604642,8407522,8275938,8144610,8013026,7946978,7815650,7749602,7618274,7552226,7486434,7355106,7289058,7223266,7157474,7091426,7025634,6959842,6894050,6828002,6762210,6696418,6630626,6564834,6499042,6433250,6432994,6367202,6301410,6301154,6235618,6169826, 
3631867,3631865,3566585,3566840,3501560,3501815,3502070,3502070,3436789,3437044,3437044,3372019,3372019,3372274,3372529,3307248,3241711,3307503,3242223,3176941,3177196,3177196,3177451,3177706,3112425,3047146,3047400,3047400,2982120,3047910,2982374,2917349,2917605,2917603,2852323,2918114,2852833,2852833,2787553,2787808,2788063,2722782,2723037,2723293,2723548,2723548,2592731,2658522,2593241,2593240,2527960,2528215,2462934,2462934,2463189,2463445,2398163,2398419,2398675,2333393,2333649,2333648,2333648,2268367,2203086,2203341,2203597,2203852,2138827,2139082,2073801,2074056,2008774,1943494,1943749,1878724,1944258,1879234,1813953,1814208,1814719,1749438,1684157,1618875,1619130,1554105,1554360,1554616,1489334,1489589,1424565,1424819,1425074,1359794,1360048,1295024,1229487,1229997,1164716,1164971,1165482,1099945,1034920,1035175,969894,970149,970405,905123,905634,840097,775072,775328,840607,1167778,1428900,1690278,2017193,2343851,2539950,2866609,3193523,3454902,3716024,3977402,4304317,4565695,4892353,5153732,5415110,5676489,5937868,6329805,6656464,6983124,7375574,7701978,8028893,8355552,8747747,9139942,9401064,9727723,10119919,10446321,10838772,11230967,11361273,11361273,11230202,11164666,11033594,10902522,10902265,10771450,10705658,10574586,10509306,10378234,10378234,10247161,10181626,10050297,9985018,9984762,9853946,9788154,9657082,9657337,9591546,9460473,9395194,9394682,9656058,9917690,10113274,10309371,10571003,10766587,11028219,11224059,11485692,11681532,11877628,12138748,12334844,12595965,12792061,12988157,13249277,13576190,13837565,14098686,14360061,14686717,14948350,15209470,15470846,15797503,15993343,16254719,16581375,16712701,16714231,16716017,16717290,16718820,16720350,16722136,16723666,16725195,16726725,16728511,16730041,16731571,16733357,16734887,16736416,16737947,16739476,16741005,16742791,16744322,16746106,16747891,16749676,16751717,16753501,16755286,16757070,16759111,16760896,16762681,16764466,16766250,16768291,16770075,16771860,16773902,16775686,16776961,16776960,16776960,16776960,16776961,16776960,16776961,16776961,16776960,16776961,16776961,16776961,16776960,16776960,16776961,16776960,16776961};

double map(double current, double end, double new_start, double new_end) {
  return (current / end * (new_end - new_start) + new_start);
}
__kernel void mandelbrot(__global int* out, double x_min, double x_max, double y_min, double y_max, int max_iter, double x_param, double y_param, int color) {
  max_iter = max_iter >> 1;
  int g = get_global_id(0);
  int i = g / 1920;
  int j = g % 1920;
  double x_z = map(j, 1920, x_min, x_max);
  double y_z = map(i, 1080, y_min, y_max);
  double x = x_z;
  double y = y_z;
  int iter = 0;
  double x_temp;
  while (x * x + y * y <= 4 && iter < max_iter) {
		x_temp = x * x - y * y + x_z;
		y = 2 * x * y + y_z;
		x = x_temp;
		iter++;
  }
	if (iter != max_iter)
		out[i * 1920 + j] = colors[256 * color + (iter % 256)];	
	else 
		out[i * 1920 + j] = 0;
}
__kernel void julia(__global int* out, double x_min, double x_max, double y_min, double y_max, int max_iter, double x_param, double y_param, int color) {
  max_iter = max_iter >> 1;
  int g = get_global_id(0);
  int i = g / 1920;
  int j = g % 1920;
  double x_z = map(j, 1920, x_min, x_max);
  double y_z = map(i, 1080, y_min, y_max);
  double x = x_z;
  double y = y_z;
  int iter = 0;
  double x_temp;
  while (x * x + y * y <= 4 && iter < max_iter) {
		x_temp = x * x - y * y + x_param;
		y = 2 * x * y + y_param;
		x = x_temp;
		iter++;
  }
	if (iter != max_iter)
		out[i * 1920 + j] = colors[256 * color + (iter % 256)];	
	else 
		out[i * 1920 + j] = 0;
}

__kernel void burning(__global int* out, double x_min, double x_max, double y_min, double y_max, int max_iter, double x_param, double y_param, int color) {
  max_iter = max_iter >> 1;
  int g = get_global_id(0);
  int i = g / 1920;
  int j = g % 1920;
  double x_z = map(j, 1920, x_min, x_max);
  double y_z = map(i, 1080, y_min, y_max);
  double x = x_z;
  double y = y_z;
  int iter = 0;
  double x_temp;
  while (x * x + y * y <= 4 && iter < max_iter) {
		x_temp = x * x - y * y + x_z;
		y = fabs(2 * x * y + y_z);
		x = fabs(x_temp);
		iter++;
  }
	if (iter != max_iter)
		out[i * 1920 + j] = colors[256 * color + (iter % 256)];	
	else 
		out[i * 1920 + j] = 0;
}